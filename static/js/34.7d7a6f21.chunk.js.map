{"version":3,"sources":["components/pagecomponents/TitleText.tsx","components/pagecomponents/TitleBar.tsx","i18n/LocalizedDate.tsx","utils/refreshToken.ts","i18n/TransactionTypeText.tsx","components/transactions/OrgTransactionTable.tsx","pages/Expenses/Transactions/Domain/Table.tsx","pages/Expenses/Transactions/Domain/index.tsx"],"names":["Title","styled","h1","TitleText","children","TitleBar","div","spaceBetween","LocalizedDate","dateTimeString","dayjs","format","useRefreshToken","useState","refreshToken","setRefreshToken","useCallback","original","root","lang","components","transactions","type","TransactionTypeText","id","org","timeSorter","a","b","isBefore","OrgTransactionTable","data","loading","dataSource","rowKey","Column","title","time","dataIndex","sorter","defaultSortOrder","render","payer","receiver","amount","toFixed","reason","service","getApiService","TransactionsService","Table","user","useStore","UserStore","getTransactions","getDomainTransactions","scope","domainId","then","x","useAsync","promiseFn","watch","isPending","expenses","domainTransactions","DomainTransactions","token","refresh","ClickableA","onClick"],"mappings":"uIAAA,sDAGMA,EAHN,OAGcC,EAAOC,GAAV,uEAAGD,CAAH,qCAKEE,EAAsB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpC,OACE,kBAACJ,EAAD,KAAQI,K,iCCTZ,sCAMaC,EANb,OAMwBJ,EAAOK,IAAV,2DAAGL,CAAH,sBAGjB,oBAAEM,aAAF,qBAA4B,0FAAgB,O,iCCVhD,wEASaC,EAAiC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAE/C,OACE,oCACGC,IAAMD,GAAgBE,OAAO,0B,sFCX7B,SAASC,IAAmB,IAAD,EACQC,oBAAS,GADjB,mBACzBC,EADyB,KACXC,EADW,KAKhC,MAAO,CAACD,EAFmBE,uBAAY,kBAAMD,GAAgB,SAACE,GAAD,OAAeA,OAAW,O,iCCLzF,8DAIMC,EAAOC,IAAKC,WAAWC,aAAaC,KAM7BC,EAAuC,SAAC,GAAc,IAAZD,EAAW,EAAXA,KACrD,OAAO,kBAAC,IAAD,CAAWE,GAAIN,EAAKI,O,mJCGvBJ,EAAOC,IAAKC,WAAWC,aAAaI,IAEpCC,EAAa,SAACC,EAAWC,GAAZ,OAA0BlB,IAAMiB,GAAGE,SAASnB,IAAMkB,IAAM,GAAK,GAEnEE,EAAuC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAA4B,IAAtBC,eAAsB,SAEjF,OACE,uBAAOA,QAASA,EAASC,WAAYF,EAAMG,OAAO,MAChD,sBAAOC,OAAP,CAAcC,MAAO,kBAAC,IAAD,CAAWZ,GAAIN,EAAKmB,OAAUC,UAAU,OAC3DC,OAAQb,EACRc,iBAAiB,UACjBC,OAAQ,SAACJ,GAAD,OAAkB,kBAAC,IAAD,CAAe5B,eAAgB4B,OAE3D,sBAAOF,OAAP,CAAcC,MAAO,kBAAC,IAAD,CAAWZ,GAAIN,EAAKwB,QAAWJ,UAAU,cAC9D,sBAAOH,OAAP,CAAcC,MAAO,kBAAC,IAAD,CAAWZ,GAAIN,EAAKyB,WAAcL,UAAU,iBACjE,sBAAOH,OAAP,CAAcC,MAAO,kBAAC,IAAD,CAAWZ,GAAIN,EAAK0B,SAAYN,UAAU,SAC7DG,OAAQ,SAACG,GAAD,OAAoBA,EAAOC,QAAQ,MAE7C,sBAAOV,OAAP,CAAcC,MAAO,kBAAC,IAAD,CAAWZ,GAAIN,EAAK4B,SAAYR,UAAU,SAC7DG,OAAQ,SAACK,GAAD,OACN,kBAAC,IAAD,CAAqBxB,KAAMwB,EAAOxB,a,qNCzBtCyB,EAAUC,YAAcC,KAOjBC,EAAyB,SAAC,GAAsB,IAApBpC,EAAmB,EAAnBA,aAC/BqC,EAASC,YAASC,KAAlBF,KAEFG,EAAkBtC,uBAAY,kBAAM+B,EAAQQ,sBAAsBJ,EAAOK,MAAMC,UAAUC,MAAK,SAACC,GAAD,OAAOA,EAAEtC,kBAAe,CAAC8B,IAHnE,EAK9BS,YAAS,CAAEC,UAAWP,EAAiBQ,MAAOhD,IAAlEiB,EALkD,EAKlDA,KAAMgC,EAL4C,EAK5CA,UAEd,OAAO,kBAACjC,EAAA,EAAD,CAAqBC,KAAMA,EAAMC,QAAS+B,KCd7C7C,EAAOC,IAAK6C,SAASC,mBAEdC,EAAoD,WAAO,IAAD,EAE5CtD,cAF4C,mBAE9DuD,EAF8D,KAEvDC,EAFuD,KAIrE,OACE,6BACE,kBAAC/D,EAAA,EAAD,CAAUE,cAAc,GACtB,kBAACJ,EAAA,EAAD,KAAW,kBAAC,IAAD,CAAWqB,GAAIN,EAAKkB,SAC/B,kBAACiC,EAAA,EAAD,CAAYC,QAASF,GAAS,kBAAC,IAAD,CAAW5C,GAAIN,EAAKkD,YAEpD,kBAAC,EAAD,CAAOtD,aAAcqD,MAMZD","file":"static/js/34.7d7a6f21.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst Title = styled.h1`\r\n  font-weight: 700;\r\n  font-size: 16px;\r\n`;\r\n\r\nexport const TitleText: React.FC = ({ children }) => {\r\n  return (\r\n    <Title>{children}</Title>\r\n  );\r\n}\r\n\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface Props {\r\n  spaceBetween?: boolean;\r\n}\r\n\r\nexport const TitleBar = styled.div<Props>`\r\n  margin: 8px 0;\r\n\r\n  ${({spaceBetween = false}) => !spaceBetween ? \"\" : `\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  `}\r\n`;\r\n\r\n","import React, { useMemo } from \"react\";\r\nimport { useStore } from 'simstate';\r\nimport { I18nStore } from '.';\r\nimport dayjs from \"dayjs\";\r\n\r\ninterface Props {\r\n  dateTimeString: string;\r\n}\r\n\r\nexport const LocalizedDate: React.FC<Props> = ({ dateTimeString }) => {\r\n\r\n  return (\r\n    <>\r\n      {dayjs(dateTimeString).format(\"YYYY-MM-DD HH:mm:ss\")}\r\n    </>\r\n  )\r\n}\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport function useRefreshToken() {\r\n  const [refreshToken, setRefreshToken] = useState(false);\r\n\r\n  const updateRefreshToken = useCallback(() => setRefreshToken((original) => !original), []);\r\n\r\n  return [refreshToken, updateRefreshToken] as const;\r\n}\r\n\r\nexport interface Refreshable {\r\n  refreshToken: boolean;\r\n}\r\n","import React from \"react\";\r\nimport { TransactionType } from 'src/models/TransactionReason';\r\nimport { lang, Localized } from \"src/i18n\";\r\n\r\nconst root = lang.components.transactions.type;\r\n\r\ninterface Props {\r\n  type: TransactionType;\r\n}\r\n\r\nexport const TransactionTypeText: React.FC<Props> = ({ type }) => {\r\n  return <Localized id={root[type]} />\r\n}\r\n","import React from \"react\";\r\nimport { Table } from \"antd\";\r\nimport { lang, Localized } from \"src/i18n\";\r\nimport { TransactionTypeText } from \"src/i18n/TransactionTypeText\";\r\nimport { TransactionType, TransactionReason } from \"src/models/TransactionReason\";\r\nimport dayjs from \"dayjs\";\r\nimport { LocalizedDate } from \"src/i18n/LocalizedDate\";\r\nimport { OrgTransaction } from \"src/models/OrgTransaction\";\r\n\r\ninterface Props {\r\n  data: OrgTransaction[] | undefined;\r\n  loading?: boolean;\r\n}\r\n\r\nconst root = lang.components.transactions.org;\r\n\r\nconst timeSorter = (a: string, b: string) => dayjs(a).isBefore(dayjs(b)) ? 1 : -1;\r\n\r\nexport const OrgTransactionTable: React.FC<Props> = ({ data, loading = false }) => {\r\n\r\n  return (\r\n    <Table loading={loading} dataSource={data} rowKey=\"id\">\r\n      <Table.Column title={<Localized id={root.time} />} dataIndex=\"time\"\r\n        sorter={timeSorter}\r\n        defaultSortOrder=\"descend\"\r\n        render={(time: string) => <LocalizedDate dateTimeString={time} />}\r\n      />\r\n      <Table.Column title={<Localized id={root.payer} />} dataIndex=\"payerName\" />\r\n      <Table.Column title={<Localized id={root.receiver} />} dataIndex=\"receiverName\" />\r\n      <Table.Column title={<Localized id={root.amount} />} dataIndex=\"amount\"\r\n        render={(amount: number) => amount.toFixed(2)}\r\n      />\r\n      <Table.Column title={<Localized id={root.reason} />} dataIndex=\"reason\"\r\n        render={(reason: TransactionReason) => (\r\n          <TransactionTypeText type={reason.type} />\r\n        )} />\r\n    </Table>\r\n  )\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { getApiService } from \"src/apis\";\r\nimport { Spin } from \"antd\";\r\nimport { useAsync } from \"react-async\";\r\nimport { TransactionsService } from \"src/apis/expenses/TransactionsService\";\r\nimport { OrgTransactionTable } from 'src/components/transactions/OrgTransactionTable';\r\nimport { useStore } from \"simstate\";\r\nimport { UserStore } from \"src/stores/UserStore\";\r\n\r\nconst service = getApiService(TransactionsService);\r\n\r\n\r\ninterface Props {\r\n  refreshToken: any;\r\n}\r\n\r\nexport const Table: React.FC<Props> = ({ refreshToken }) => {\r\n  const { user } = useStore(UserStore);\r\n\r\n  const getTransactions = useCallback(() => service.getDomainTransactions(user!!.scope.domainId).then((x) => x.transactions), [user]);\r\n\r\n  const { data, isPending } = useAsync({ promiseFn: getTransactions, watch: refreshToken });\r\n\r\n  return <OrgTransactionTable data={data} loading={isPending} />;\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { RouteComponentProps } from \"@reach/router\";\r\nimport { TitleBar } from \"src/components/pagecomponents/TitleBar\";\r\nimport { TitleText } from \"src/components/pagecomponents/TitleText\";\r\nimport { lang, Localized } from \"src/i18n\";\r\nimport { useRefreshToken } from \"src/utils/refreshToken\";\r\nimport { ClickableA } from \"src/components/ClickableA\";\r\nimport { Table } from \"./Table\";\r\n\r\nconst root = lang.expenses.domainTransactions;\r\n\r\nexport const DomainTransactions: React.FC<RouteComponentProps> = () => {\r\n\r\n  const [token, refresh] = useRefreshToken();\r\n\r\n  return (\r\n    <div>\r\n      <TitleBar spaceBetween={true}>\r\n        <TitleText><Localized id={root.title} /></TitleText>\r\n        <ClickableA onClick={refresh}><Localized id={root.refresh} /></ClickableA>\r\n      </TitleBar>\r\n      <Table refreshToken={token} />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default DomainTransactions;\r\n"],"sourceRoot":""}